using Microsoft.Data.SqlClient;
namespace LibraryAdo37.Repository
{
public sealed class GenreRepository : IGenreRepository
{
    private readonly ISqlConnectionFactory _factory;

    public GenreRepository(ISqlConnectionFactory factory)
    {
        _factory = factory;
    }

    public async Task<int> CreateAsync(Genre g)
    {
        const string sql = "INSERT INTO Genres(Name) VALUES(@Name); SELECT SCOPE_IDENTITY();";
        using var conn = _factory.Create();
        await conn.OpenAsync();
        using var cmd = new SqlCommand(sql, conn);
        cmd.Parameters.AddWithValue("@Name", g.Name);
        return Convert.ToInt32(await cmd.ExecuteScalarAsync());
    }

    public async Task<Genre?> GetByIdAsync(int id)
    {
        const string sql = "SELECT Id, Name FROM Genres WHERE Id=@Id;";
        using var conn = _factory.Create();
        await conn.OpenAsync();
        using var cmd = new SqlCommand(sql, conn);
        cmd.Parameters.AddWithValue("@Id", id);
        using var r = await cmd.ExecuteReaderAsync();
        if (!await r.ReadAsync()) return null;
        return new Genre { Id = r.GetInt32(0), Name = r.GetString(1) };
    }

    public async Task<bool> UpdateAsync(Genre g)
    {
        const string sql = "UPDATE Genres SET Name=@Name WHERE Id=@Id;";
        using var conn = _factory.Create();
        await conn.OpenAsync();
        using var cmd = new SqlCommand(sql, conn);
        cmd.Parameters.AddWithValue("@Name", g.Name);
        cmd.Parameters.AddWithValue("@Id", g.Id);
        return await cmd.ExecuteNonQueryAsync() == 1;
    }

    public async Task<bool> DeleteAsync(int id)
    {
        const string sql = "DELETE FROM Genres WHERE Id=@Id;";
        using var conn = _factory.Create();
        await conn.OpenAsync();
        using var cmd = new SqlCommand(sql, conn);
        cmd.Parameters.AddWithValue("@Id", id);
        return await cmd.ExecuteNonQueryAsync() == 1;
    }

    public async Task<IReadOnlyList<Genre>> GetAllAsync()
    {
        const string sql = "SELECT Id, Name FROM Genres ORDER BY Name;";
        var list = new List<Genre>();
        using var conn = _factory.Create();
        await conn.OpenAsync();
        using var cmd = new SqlCommand(sql, conn);
        using var r = await cmd.ExecuteReaderAsync();
        while (await r.ReadAsync())
            list.Add(new Genre { Id = r.GetInt32(0), Name = r.GetString(1) });
        return list;
    }
}
}